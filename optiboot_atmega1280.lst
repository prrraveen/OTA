
optiboot_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0001fe8e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  00000322  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f3  00000000  00000000  00000365  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a1  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  00000cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e2  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b4  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
   1fc00:	01 c0       	rjmp	.+2      	; 0x1fc04 <main>
   1fc02:	f1 c0       	rjmp	.+482    	; 0x1fde6 <do_spm>

0001fc04 <main>:
  );
}


/* main program starts here */
int main(void) {
   1fc04:	1f 92       	push	r1
   1fc06:	cd b7       	in	r28, 0x3d	; 61
   1fc08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc0a:	11 24       	eor	r1, r1
   * and still skip bootloader if not necessary
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
  ch = MCUSR;
   1fc0c:	84 b7       	in	r24, 0x34	; 52
  if (ch != 0) {
   1fc0e:	88 23       	and	r24, r24
   1fc10:	49 f0       	breq	.+18     	; 0x1fc24 <main+0x20>
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { // To run the boot loader, External Reset Flag must be set and the Watchdog Flag MUST be cleared!  Otherwise jump straight to user code.
   1fc12:	98 2f       	mov	r25, r24
   1fc14:	9a 70       	andi	r25, 0x0A	; 10
   1fc16:	92 30       	cpi	r25, 0x02	; 2
   1fc18:	29 f0       	breq	.+10     	; 0x1fc24 <main+0x20>
      if (ch & _BV(EXTRF)) 
   1fc1a:	81 ff       	sbrs	r24, 1
   1fc1c:	02 c0       	rjmp	.+4      	; 0x1fc22 <main+0x1e>
          MCUSR = ~(_BV(WDRF));  // Clear WDRF because it was actually caused by bootloader
   1fc1e:	97 ef       	ldi	r25, 0xF7	; 247
   1fc20:	94 bf       	out	0x34, r25	; 52
      appStart(ch);
   1fc22:	19 d1       	rcall	.+562    	; 0x1fe56 <appStart>
    }
  }
  
#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc24:	85 e0       	ldi	r24, 0x05	; 5
   1fc26:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc2a:	82 e0       	ldi	r24, 0x02	; 2
   1fc2c:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc30:	88 e1       	ldi	r24, 0x18	; 24
   1fc32:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc36:	86 e0       	ldi	r24, 0x06	; 6
   1fc38:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc3c:	80 e1       	ldi	r24, 0x10	; 16
   1fc3e:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc42:	8e e0       	ldi	r24, 0x0E	; 14
   1fc44:	f3 d0       	rcall	.+486    	; 0x1fe2c <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc46:	27 9a       	sbi	0x04, 7	; 4
   1fc48:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc4a:	80 e3       	ldi	r24, 0x30	; 48
   1fc4c:	9c ef       	ldi	r25, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   1fc4e:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc50:	90 93 85 00 	sts	0x0085, r25
   1fc54:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
   1fc58:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc5a:	b0 9b       	sbis	0x16, 0	; 22
   1fc5c:	fe cf       	rjmp	.-4      	; 0x1fc5a <main+0x56>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc5e:	1f 9a       	sbi	0x03, 7	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc60:	a8 95       	wdr
   1fc62:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc64:	a9 f7       	brne	.-22     	; 0x1fc50 <main+0x4c>
   1fc66:	81 2c       	mov	r8, r1
   1fc68:	91 2c       	mov	r9, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc6a:	d4 d0       	rcall	.+424    	; 0x1fe14 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc6c:	81 34       	cpi	r24, 0x41	; 65
   1fc6e:	d1 f4       	brne	.+52     	; 0x1fca4 <main+0xa0>
      unsigned char which = getch();
   1fc70:	d1 d0       	rcall	.+418    	; 0x1fe14 <getch>
      verifySpace();
   1fc72:	89 83       	std	Y+1, r24	; 0x01
   1fc74:	e1 d0       	rcall	.+450    	; 0x1fe38 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
   1fc76:	89 81       	ldd	r24, Y+1	; 0x01
   1fc78:	82 38       	cpi	r24, 0x82	; 130
   1fc7a:	11 f4       	brne	.+4      	; 0x1fc80 <main+0x7c>
	  putch(optiboot_version & 0xFF);
   1fc7c:	82 e0       	ldi	r24, 0x02	; 2
   1fc7e:	10 c0       	rjmp	.+32     	; 0x1fca0 <main+0x9c>
      } else if (which == 0x81) {
   1fc80:	81 38       	cpi	r24, 0x81	; 129
   1fc82:	69 f4       	brne	.+26     	; 0x1fc9e <main+0x9a>
	  putch(optiboot_version >> 8);
   1fc84:	86 e0       	ldi	r24, 0x06	; 6
   1fc86:	0c c0       	rjmp	.+24     	; 0x1fca0 <main+0x9c>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fc88:	84 37       	cpi	r24, 0x74	; 116
   1fc8a:	09 f4       	brne	.+2      	; 0x1fc8e <main+0x8a>
   1fc8c:	82 c0       	rjmp	.+260    	; 0x1fd92 <main+0x18e>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fc8e:	85 37       	cpi	r24, 0x75	; 117
   1fc90:	09 f0       	breq	.+2      	; 0x1fc94 <main+0x90>
   1fc92:	a1 c0       	rjmp	.+322    	; 0x1fdd6 <main+0x1d2>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fc94:	d1 d0       	rcall	.+418    	; 0x1fe38 <verifySpace>
      putch(SIGNATURE_0);
   1fc96:	8e e1       	ldi	r24, 0x1E	; 30
   1fc98:	b6 d0       	rcall	.+364    	; 0x1fe06 <putch>
      putch(SIGNATURE_1);
   1fc9a:	87 e9       	ldi	r24, 0x97	; 151
   1fc9c:	b4 d0       	rcall	.+360    	; 0x1fe06 <putch>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc9e:	83 e0       	ldi	r24, 0x03	; 3
   1fca0:	b2 d0       	rcall	.+356    	; 0x1fe06 <putch>
   1fca2:	9e c0       	rjmp	.+316    	; 0x1fde0 <main+0x1dc>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fca4:	82 34       	cpi	r24, 0x42	; 66
   1fca6:	11 f4       	brne	.+4      	; 0x1fcac <main+0xa8>
      // SET DEVICE is ignored
      getNch(20);
   1fca8:	84 e1       	ldi	r24, 0x14	; 20
   1fcaa:	03 c0       	rjmp	.+6      	; 0x1fcb2 <main+0xae>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fcac:	85 34       	cpi	r24, 0x45	; 69
   1fcae:	19 f4       	brne	.+6      	; 0x1fcb6 <main+0xb2>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fcb0:	85 e0       	ldi	r24, 0x05	; 5
   1fcb2:	ca d0       	rcall	.+404    	; 0x1fe48 <getNch>
   1fcb4:	95 c0       	rjmp	.+298    	; 0x1fde0 <main+0x1dc>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fcb6:	85 35       	cpi	r24, 0x55	; 85
   1fcb8:	79 f4       	brne	.+30     	; 0x1fcd8 <main+0xd4>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fcba:	ac d0       	rcall	.+344    	; 0x1fe14 <getch>
   1fcbc:	88 2e       	mov	r8, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fcbe:	aa d0       	rcall	.+340    	; 0x1fe14 <getch>
   1fcc0:	91 2c       	mov	r9, r1
   1fcc2:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (newAddress & 0x8000) {
        RAMPZ |= 0x01;
   1fcc4:	8b b7       	in	r24, 0x3b	; 59
      uint16_t newAddress;
      newAddress = getch();
      newAddress = (newAddress & 0xff) | (getch() << 8);
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (newAddress & 0x8000) {
   1fcc6:	97 fe       	sbrs	r9, 7
   1fcc8:	02 c0       	rjmp	.+4      	; 0x1fcce <main+0xca>
        RAMPZ |= 0x01;
   1fcca:	81 60       	ori	r24, 0x01	; 1
   1fccc:	01 c0       	rjmp	.+2      	; 0x1fcd0 <main+0xcc>
      }
      else {
        RAMPZ &= 0xFE;
   1fcce:	8e 7f       	andi	r24, 0xFE	; 254
   1fcd0:	8b bf       	out	0x3b, r24	; 59
      }
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcd2:	88 0c       	add	r8, r8
   1fcd4:	99 1c       	adc	r9, r9
   1fcd6:	83 c0       	rjmp	.+262    	; 0x1fdde <main+0x1da>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fcd8:	86 35       	cpi	r24, 0x56	; 86
   1fcda:	81 f4       	brne	.+32     	; 0x1fcfc <main+0xf8>
#ifdef RAMPZ
      // LOAD_EXTENDED_ADDRESS is needed in STK_UNIVERSAL for addressing more than 128kB
      if ( AVR_OP_LOAD_EXT_ADDR == getch() ) {
   1fcdc:	9b d0       	rcall	.+310    	; 0x1fe14 <getch>
   1fcde:	8d 34       	cpi	r24, 0x4D	; 77
   1fce0:	49 f4       	brne	.+18     	; 0x1fcf4 <main+0xf0>
        // get address
        getch();  // get '0'
   1fce2:	98 d0       	rcall	.+304    	; 0x1fe14 <getch>
        RAMPZ = (RAMPZ & 0x01) | ((getch() << 1) & 0xff);  // get address and put it in RAPMZ
   1fce4:	1b b7       	in	r17, 0x3b	; 59
   1fce6:	96 d0       	rcall	.+300    	; 0x1fe14 <getch>
   1fce8:	88 0f       	add	r24, r24
   1fcea:	11 70       	andi	r17, 0x01	; 1
   1fcec:	81 2b       	or	r24, r17
   1fcee:	8b bf       	out	0x3b, r24	; 59
        getNch(1); // get last '0'
   1fcf0:	81 e0       	ldi	r24, 0x01	; 1
   1fcf2:	01 c0       	rjmp	.+2      	; 0x1fcf6 <main+0xf2>
        // response
        putch(0x00);
      }
      else {
        // everything else is ignored
        getNch(3);
   1fcf4:	83 e0       	ldi	r24, 0x03	; 3
   1fcf6:	a8 d0       	rcall	.+336    	; 0x1fe48 <getNch>
        putch(0x00);
   1fcf8:	80 e0       	ldi	r24, 0x00	; 0
   1fcfa:	d2 cf       	rjmp	.-92     	; 0x1fca0 <main+0x9c>
      getNch(4);
      putch(0x00);
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcfc:	84 36       	cpi	r24, 0x64	; 100
   1fcfe:	09 f0       	breq	.+2      	; 0x1fd02 <main+0xfe>
   1fd00:	c3 cf       	rjmp	.-122    	; 0x1fc88 <main+0x84>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fd02:	88 d0       	rcall	.+272    	; 0x1fe14 <getch>
   1fd04:	e8 2e       	mov	r14, r24
   1fd06:	f1 2c       	mov	r15, r1
   1fd08:	fe 2c       	mov	r15, r14
   1fd0a:	ee 24       	eor	r14, r14
   1fd0c:	83 d0       	rcall	.+262    	; 0x1fe14 <getch>
   1fd0e:	e8 2a       	or	r14, r24
      savelength = length;
      desttype = getch();
   1fd10:	81 d0       	rcall	.+258    	; 0x1fe14 <getch>
   1fd12:	b8 2e       	mov	r11, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fd14:	87 01       	movw	r16, r14
      savelength = length;
      desttype = getch();
   1fd16:	c1 2c       	mov	r12, r1
   1fd18:	32 e0       	ldi	r19, 0x02	; 2
   1fd1a:	d3 2e       	mov	r13, r19

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fd1c:	7b d0       	rcall	.+246    	; 0x1fe14 <getch>
   1fd1e:	f6 01       	movw	r30, r12
   1fd20:	81 93       	st	Z+, r24
   1fd22:	6f 01       	movw	r12, r30
      while (--length);
   1fd24:	01 50       	subi	r16, 0x01	; 1
   1fd26:	11 09       	sbc	r17, r1
   1fd28:	c9 f7       	brne	.-14     	; 0x1fd1c <main+0x118>

      // Read command terminator, start reply
      verifySpace();
   1fd2a:	86 d0       	rcall	.+268    	; 0x1fe38 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
   1fd2c:	f5 e4       	ldi	r31, 0x45	; 69
   1fd2e:	bf 12       	cpse	r11, r31
   1fd30:	12 c0       	rjmp	.+36     	; 0x1fd56 <main+0x152>
   1fd32:	e8 0c       	add	r14, r8
   1fd34:	f9 1c       	adc	r15, r9
   1fd36:	84 01       	movw	r16, r8
   1fd38:	c1 2c       	mov	r12, r1
   1fd3a:	92 e0       	ldi	r25, 0x02	; 2
   1fd3c:	d9 2e       	mov	r13, r25
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
   1fd3e:	0e 15       	cp	r16, r14
   1fd40:	1f 05       	cpc	r17, r15
   1fd42:	09 f4       	brne	.+2      	; 0x1fd46 <main+0x142>
   1fd44:	4d c0       	rjmp	.+154    	; 0x1fde0 <main+0x1dc>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
   1fd46:	f6 01       	movw	r30, r12
   1fd48:	61 91       	ld	r22, Z+
   1fd4a:	6f 01       	movw	r12, r30
   1fd4c:	c8 01       	movw	r24, r16
   1fd4e:	91 d0       	rcall	.+290    	; 0x1fe72 <__eewr_byte_m1280>
   1fd50:	0f 5f       	subi	r16, 0xFF	; 255
   1fd52:	1f 4f       	sbci	r17, 0xFF	; 255
   1fd54:	f4 cf       	rjmp	.-24     	; 0x1fd3e <main+0x13a>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
   1fd56:	40 e0       	ldi	r20, 0x00	; 0
   1fd58:	50 e0       	ldi	r21, 0x00	; 0
   1fd5a:	63 e0       	ldi	r22, 0x03	; 3
   1fd5c:	c4 01       	movw	r24, r8
   1fd5e:	43 d0       	rcall	.+134    	; 0x1fde6 <do_spm>
   1fd60:	00 e0       	ldi	r16, 0x00	; 0
   1fd62:	10 e0       	ldi	r17, 0x00	; 0
   1fd64:	f8 01       	movw	r30, r16
   1fd66:	fe 5f       	subi	r31, 0xFE	; 254
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
   1fd68:	40 81       	ld	r20, Z
   1fd6a:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
   1fd6c:	80 81       	ld	r24, Z
   1fd6e:	50 e0       	ldi	r21, 0x00	; 0
   1fd70:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
   1fd72:	61 e0       	ldi	r22, 0x01	; 1
   1fd74:	c8 01       	movw	r24, r16
   1fd76:	88 0d       	add	r24, r8
   1fd78:	99 1d       	adc	r25, r9
   1fd7a:	35 d0       	rcall	.+106    	; 0x1fde6 <do_spm>
   1fd7c:	0e 5f       	subi	r16, 0xFE	; 254
   1fd7e:	1f 4f       	sbci	r17, 0xFF	; 255
		addrPtr += 2;
	    } while (len -= 2);
   1fd80:	e0 16       	cp	r14, r16
   1fd82:	f1 06       	cpc	r15, r17
   1fd84:	79 f7       	brne	.-34     	; 0x1fd64 <main+0x160>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
   1fd86:	40 e0       	ldi	r20, 0x00	; 0
   1fd88:	50 e0       	ldi	r21, 0x00	; 0
   1fd8a:	65 e0       	ldi	r22, 0x05	; 5
   1fd8c:	c4 01       	movw	r24, r8
   1fd8e:	2b d0       	rcall	.+86     	; 0x1fde6 <do_spm>
   1fd90:	27 c0       	rjmp	.+78     	; 0x1fde0 <main+0x1dc>

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
      uint8_t desttype;
      GETLENGTH(length);
   1fd92:	40 d0       	rcall	.+128    	; 0x1fe14 <getch>
   1fd94:	08 2f       	mov	r16, r24
   1fd96:	10 e0       	ldi	r17, 0x00	; 0
   1fd98:	10 2f       	mov	r17, r16
   1fd9a:	00 27       	eor	r16, r16
   1fd9c:	3b d0       	rcall	.+118    	; 0x1fe14 <getch>
   1fd9e:	08 2b       	or	r16, r24

      desttype = getch();
   1fda0:	39 d0       	rcall	.+114    	; 0x1fe14 <getch>

      verifySpace();
   1fda2:	89 83       	std	Y+1, r24	; 0x01
   1fda4:	49 d0       	rcall	.+146    	; 0x1fe38 <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fda6:	89 81       	ldd	r24, Y+1	; 0x01
   1fda8:	74 01       	movw	r14, r8
   1fdaa:	85 34       	cpi	r24, 0x45	; 69
   1fdac:	61 f4       	brne	.+24     	; 0x1fdc6 <main+0x1c2>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
   1fdae:	c7 01       	movw	r24, r14
   1fdb0:	58 d0       	rcall	.+176    	; 0x1fe62 <__eerd_byte_m1280>
   1fdb2:	29 d0       	rcall	.+82     	; 0x1fe06 <putch>
	} while (--length);
   1fdb4:	01 50       	subi	r16, 0x01	; 1
   1fdb6:	11 09       	sbc	r17, r1
   1fdb8:	ff ef       	ldi	r31, 0xFF	; 255
   1fdba:	ef 1a       	sub	r14, r31
   1fdbc:	ff 0a       	sbc	r15, r31
   1fdbe:	01 15       	cp	r16, r1
   1fdc0:	11 05       	cpc	r17, r1
   1fdc2:	a9 f7       	brne	.-22     	; 0x1fdae <main+0x1aa>
   1fdc4:	0d c0       	rjmp	.+26     	; 0x1fde0 <main+0x1dc>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fdc6:	f7 01       	movw	r30, r14
   1fdc8:	87 91       	elpm	r24, Z+
   1fdca:	7f 01       	movw	r14, r30
   1fdcc:	1c d0       	rcall	.+56     	; 0x1fe06 <putch>
	} while (--length);
   1fdce:	01 50       	subi	r16, 0x01	; 1
   1fdd0:	11 09       	sbc	r17, r1
   1fdd2:	c9 f7       	brne	.-14     	; 0x1fdc6 <main+0x1c2>
   1fdd4:	05 c0       	rjmp	.+10     	; 0x1fde0 <main+0x1dc>
      verifySpace();
      putch(SIGNATURE_0);
      putch(SIGNATURE_1);
      putch(SIGNATURE_2);
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fdd6:	81 35       	cpi	r24, 0x51	; 81
   1fdd8:	11 f4       	brne	.+4      	; 0x1fdde <main+0x1da>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fdda:	88 e0       	ldi	r24, 0x08	; 8
   1fddc:	27 d0       	rcall	.+78     	; 0x1fe2c <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fdde:	2c d0       	rcall	.+88     	; 0x1fe38 <verifySpace>
    }
    putch(STK_OK);
   1fde0:	80 e1       	ldi	r24, 0x10	; 16
   1fde2:	11 d0       	rcall	.+34     	; 0x1fe06 <putch>
  }
   1fde4:	42 cf       	rjmp	.-380    	; 0x1fc6a <main+0x66>

0001fde6 <do_spm>:
 *   you could do fill-erase-write sequence with data!=0 in ERASE and
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
   1fde6:	fc 01       	movw	r30, r24
   1fde8:	0a 01       	movw	r0, r20
   1fdea:	67 bf       	out	0x37, r22	; 55
   1fdec:	e8 95       	spm
   1fdee:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
   1fdf0:	07 b6       	in	r0, 0x37	; 55
   1fdf2:	00 fc       	sbrc	r0, 0
   1fdf4:	fd cf       	rjmp	.-6      	; 0x1fdf0 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   1fdf6:	66 70       	andi	r22, 0x06	; 6
   1fdf8:	29 f0       	breq	.+10     	; 0x1fe04 <do_spm+0x1e>
   1fdfa:	45 2b       	or	r20, r21
   1fdfc:	19 f4       	brne	.+6      	; 0x1fe04 <do_spm+0x1e>
      // Reenable read access to flash
      boot_rww_enable();
   1fdfe:	81 e1       	ldi	r24, 0x11	; 17
   1fe00:	87 bf       	out	0x37, r24	; 55
   1fe02:	e8 95       	spm
   1fe04:	08 95       	ret

0001fe06 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fe06:	90 91 c0 00 	lds	r25, 0x00C0
   1fe0a:	95 ff       	sbrs	r25, 5
   1fe0c:	fc cf       	rjmp	.-8      	; 0x1fe06 <putch>
  UART_UDR = ch;
   1fe0e:	80 93 c6 00 	sts	0x00C6, r24
   1fe12:	08 95       	ret

0001fe14 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fe14:	80 91 c0 00 	lds	r24, 0x00C0
   1fe18:	87 ff       	sbrs	r24, 7
   1fe1a:	fc cf       	rjmp	.-8      	; 0x1fe14 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fe1c:	80 91 c0 00 	lds	r24, 0x00C0
   1fe20:	84 fd       	sbrc	r24, 4
   1fe22:	01 c0       	rjmp	.+2      	; 0x1fe26 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe24:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fe26:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fe2a:	08 95       	ret

0001fe2c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe2c:	e0 e6       	ldi	r30, 0x60	; 96
   1fe2e:	f0 e0       	ldi	r31, 0x00	; 0
   1fe30:	98 e1       	ldi	r25, 0x18	; 24
   1fe32:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe34:	80 83       	st	Z, r24
   1fe36:	08 95       	ret

0001fe38 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe38:	ed df       	rcall	.-38     	; 0x1fe14 <getch>
   1fe3a:	80 32       	cpi	r24, 0x20	; 32
   1fe3c:	19 f0       	breq	.+6      	; 0x1fe44 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe3e:	88 e0       	ldi	r24, 0x08	; 8
   1fe40:	f5 df       	rcall	.-22     	; 0x1fe2c <watchdogConfig>
   1fe42:	ff cf       	rjmp	.-2      	; 0x1fe42 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe44:	84 e1       	ldi	r24, 0x14	; 20
   1fe46:	df cf       	rjmp	.-66     	; 0x1fe06 <putch>

0001fe48 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe48:	cf 93       	push	r28
   1fe4a:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe4c:	e3 df       	rcall	.-58     	; 0x1fe14 <getch>
   1fe4e:	c1 50       	subi	r28, 0x01	; 1
   1fe50:	e9 f7       	brne	.-6      	; 0x1fe4c <getNch+0x4>
  verifySpace();
}
   1fe52:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fe54:	f1 cf       	rjmp	.-30     	; 0x1fe38 <verifySpace>

0001fe56 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe56:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe58:	80 e0       	ldi	r24, 0x00	; 0
   1fe5a:	e8 df       	rcall	.-48     	; 0x1fe2c <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fe5c:	e0 e0       	ldi	r30, 0x00	; 0
   1fe5e:	ff 27       	eor	r31, r31
   1fe60:	09 94       	ijmp

0001fe62 <__eerd_byte_m1280>:
   1fe62:	f9 99       	sbic	0x1f, 1	; 31
   1fe64:	fe cf       	rjmp	.-4      	; 0x1fe62 <__eerd_byte_m1280>
   1fe66:	92 bd       	out	0x22, r25	; 34
   1fe68:	81 bd       	out	0x21, r24	; 33
   1fe6a:	f8 9a       	sbi	0x1f, 0	; 31
   1fe6c:	99 27       	eor	r25, r25
   1fe6e:	80 b5       	in	r24, 0x20	; 32
   1fe70:	08 95       	ret

0001fe72 <__eewr_byte_m1280>:
   1fe72:	26 2f       	mov	r18, r22

0001fe74 <__eewr_r18_m1280>:
   1fe74:	f9 99       	sbic	0x1f, 1	; 31
   1fe76:	fe cf       	rjmp	.-4      	; 0x1fe74 <__eewr_r18_m1280>
   1fe78:	1f ba       	out	0x1f, r1	; 31
   1fe7a:	92 bd       	out	0x22, r25	; 34
   1fe7c:	81 bd       	out	0x21, r24	; 33
   1fe7e:	20 bd       	out	0x20, r18	; 32
   1fe80:	0f b6       	in	r0, 0x3f	; 63
   1fe82:	f8 94       	cli
   1fe84:	fa 9a       	sbi	0x1f, 2	; 31
   1fe86:	f9 9a       	sbi	0x1f, 1	; 31
   1fe88:	0f be       	out	0x3f, r0	; 63
   1fe8a:	01 96       	adiw	r24, 0x01	; 1
   1fe8c:	08 95       	ret
