
optiboot_atmega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fde  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066e  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000269  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bd  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040b  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <main>
    3e02:	af c0       	rjmp	.+350    	; 0x3f62 <do_spm>

00003e04 <main>:
  );
}


/* main program starts here */
int main(void) {
    3e04:	1f 92       	push	r1
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3e0a:	11 24       	eor	r1, r1
   * and still skip bootloader if not necessary
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
  ch = MCUSR;
    3e0c:	84 b7       	in	r24, 0x34	; 52
  if (ch != 0) {
    3e0e:	88 23       	and	r24, r24
    3e10:	49 f0       	breq	.+18     	; 0x3e24 <main+0x20>
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { // To run the boot loader, External Reset Flag must be set and the Watchdog Flag MUST be cleared!  Otherwise jump straight to user code.
    3e12:	98 2f       	mov	r25, r24
    3e14:	9a 70       	andi	r25, 0x0A	; 10
    3e16:	92 30       	cpi	r25, 0x02	; 2
    3e18:	29 f0       	breq	.+10     	; 0x3e24 <main+0x20>
      if (ch & _BV(EXTRF)) 
    3e1a:	81 ff       	sbrs	r24, 1
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <main+0x1e>
          MCUSR = ~(_BV(WDRF));  // Clear WDRF because it was actually caused by bootloader
    3e1e:	97 ef       	ldi	r25, 0xF7	; 247
    3e20:	94 bf       	out	0x34, r25	; 52
      appStart(ch);
    3e22:	d7 d0       	rcall	.+430    	; 0x3fd2 <appStart>
    }
  }
  
#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e24:	85 e0       	ldi	r24, 0x05	; 5
    3e26:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    3e30:	88 e1       	ldi	r24, 0x18	; 24
    3e32:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    3e36:	86 e0       	ldi	r24, 0x06	; 6
    3e38:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e3c:	85 e1       	ldi	r24, 0x15	; 21
    3e3e:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    3e42:	8e e0       	ldi	r24, 0x0E	; 14
    3e44:	b1 d0       	rcall	.+354    	; 0x3fa8 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3e46:	25 9a       	sbi	0x04, 5	; 4
    3e48:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e4a:	8c e3       	ldi	r24, 0x3C	; 60
    3e4c:	9b ef       	ldi	r25, 0xFB	; 251
    TIFR1 = _BV(TOV1);
    3e4e:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e50:	90 93 85 00 	sts	0x0085, r25
    3e54:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
    3e58:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
    3e5a:	b0 9b       	sbis	0x16, 0	; 22
    3e5c:	fe cf       	rjmp	.-4      	; 0x3e5a <main+0x56>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    3e5e:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e60:	a8 95       	wdr
    3e62:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    3e64:	a9 f7       	brne	.-22     	; 0x3e50 <main+0x4c>
    3e66:	a1 2c       	mov	r10, r1
    3e68:	b1 2c       	mov	r11, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e6a:	92 d0       	rcall	.+292    	; 0x3f90 <getch>

    if(ch == STK_GET_PARAMETER) {
    3e6c:	81 34       	cpi	r24, 0x41	; 65
    3e6e:	71 f4       	brne	.+28     	; 0x3e8c <main+0x88>
      unsigned char which = getch();
    3e70:	8f d0       	rcall	.+286    	; 0x3f90 <getch>
      verifySpace();
    3e72:	89 83       	std	Y+1, r24	; 0x01
    3e74:	9f d0       	rcall	.+318    	; 0x3fb4 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	82 38       	cpi	r24, 0x82	; 130
    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x7c>
	  putch(optiboot_version & 0xFF);
    3e7c:	82 e0       	ldi	r24, 0x02	; 2
    3e7e:	04 c0       	rjmp	.+8      	; 0x3e88 <main+0x84>
      } else if (which == 0x81) {
    3e80:	81 38       	cpi	r24, 0x81	; 129
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <main+0x82>
    3e84:	64 c0       	rjmp	.+200    	; 0x3f4e <main+0x14a>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    3e86:	83 e0       	ldi	r24, 0x03	; 3
    3e88:	7c d0       	rcall	.+248    	; 0x3f82 <putch>
    3e8a:	68 c0       	rjmp	.+208    	; 0x3f5c <main+0x158>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    3e8c:	82 34       	cpi	r24, 0x42	; 66
    3e8e:	11 f4       	brne	.+4      	; 0x3e94 <main+0x90>
      // SET DEVICE is ignored
      getNch(20);
    3e90:	84 e1       	ldi	r24, 0x14	; 20
    3e92:	03 c0       	rjmp	.+6      	; 0x3e9a <main+0x96>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e94:	85 34       	cpi	r24, 0x45	; 69
    3e96:	19 f4       	brne	.+6      	; 0x3e9e <main+0x9a>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e98:	85 e0       	ldi	r24, 0x05	; 5
    3e9a:	94 d0       	rcall	.+296    	; 0x3fc4 <getNch>
    3e9c:	5f c0       	rjmp	.+190    	; 0x3f5c <main+0x158>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e9e:	85 35       	cpi	r24, 0x55	; 85
    3ea0:	41 f4       	brne	.+16     	; 0x3eb2 <main+0xae>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3ea2:	76 d0       	rcall	.+236    	; 0x3f90 <getch>
    3ea4:	a8 2e       	mov	r10, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3ea6:	74 d0       	rcall	.+232    	; 0x3f90 <getch>
    3ea8:	b1 2c       	mov	r11, r1
    3eaa:	b8 2a       	or	r11, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3eac:	aa 0c       	add	r10, r10
    3eae:	bb 1c       	adc	r11, r11
    3eb0:	54 c0       	rjmp	.+168    	; 0x3f5a <main+0x156>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3eb2:	86 35       	cpi	r24, 0x56	; 86
    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xba>
      // UNIVERSAL command is ignored
      getNch(4);
    3eb6:	84 e0       	ldi	r24, 0x04	; 4
    3eb8:	85 d0       	rcall	.+266    	; 0x3fc4 <getNch>
      putch(0x00);
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	e5 cf       	rjmp	.-54     	; 0x3e88 <main+0x84>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3ebe:	84 36       	cpi	r24, 0x64	; 100
    3ec0:	81 f5       	brne	.+96     	; 0x3f22 <main+0x11e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    3ec2:	66 d0       	rcall	.+204    	; 0x3f90 <getch>
    3ec4:	65 d0       	rcall	.+202    	; 0x3f90 <getch>
    3ec6:	d8 2e       	mov	r13, r24
      savelength = length;
      desttype = getch();
    3ec8:	63 d0       	rcall	.+198    	; 0x3f90 <getch>
    3eca:	f8 2e       	mov	r15, r24
    3ecc:	00 e0       	ldi	r16, 0x00	; 0
    3ece:	11 e0       	ldi	r17, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ed0:	5f d0       	rcall	.+190    	; 0x3f90 <getch>
    3ed2:	f8 01       	movw	r30, r16
    3ed4:	81 93       	st	Z+, r24
    3ed6:	8f 01       	movw	r16, r30
      while (--length);
    3ed8:	de 12       	cpse	r13, r30
    3eda:	fa cf       	rjmp	.-12     	; 0x3ed0 <main+0xcc>

      // Read command terminator, start reply
      verifySpace();
    3edc:	6b d0       	rcall	.+214    	; 0x3fb4 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    3ede:	f5 e4       	ldi	r31, 0x45	; 69
    3ee0:	ff 12       	cpse	r15, r31
    3ee2:	01 c0       	rjmp	.+2      	; 0x3ee6 <main+0xe2>
    3ee4:	ff cf       	rjmp	.-2      	; 0x3ee4 <main+0xe0>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	50 e0       	ldi	r21, 0x00	; 0
    3eea:	63 e0       	ldi	r22, 0x03	; 3
    3eec:	c5 01       	movw	r24, r10
    3eee:	39 d0       	rcall	.+114    	; 0x3f62 <do_spm>
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
	    uint16_t addrPtr = (uint16_t)(void*)address;
    3ef0:	75 01       	movw	r14, r10
	 * the default rather than checking for the correct code, we save
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
    3ef2:	00 e0       	ldi	r16, 0x00	; 0
    3ef4:	11 e0       	ldi	r17, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	40 81       	ld	r20, Z
    3efa:	0e 5f       	subi	r16, 0xFE	; 254
    3efc:	1f 4f       	sbci	r17, 0xFF	; 255
    3efe:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
    3f00:	80 81       	ld	r24, Z
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
    3f06:	61 e0       	ldi	r22, 0x01	; 1
    3f08:	c7 01       	movw	r24, r14
    3f0a:	2b d0       	rcall	.+86     	; 0x3f62 <do_spm>
		addrPtr += 2;
    3f0c:	f2 e0       	ldi	r31, 0x02	; 2
    3f0e:	ef 0e       	add	r14, r31
    3f10:	f1 1c       	adc	r15, r1
	    } while (len -= 2);
    3f12:	d0 12       	cpse	r13, r16
    3f14:	f0 cf       	rjmp	.-32     	; 0x3ef6 <main+0xf2>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
    3f16:	40 e0       	ldi	r20, 0x00	; 0
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	65 e0       	ldi	r22, 0x05	; 5
    3f1c:	c5 01       	movw	r24, r10
    3f1e:	21 d0       	rcall	.+66     	; 0x3f62 <do_spm>
    3f20:	1d c0       	rjmp	.+58     	; 0x3f5c <main+0x158>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f22:	84 37       	cpi	r24, 0x74	; 116
    3f24:	69 f4       	brne	.+26     	; 0x3f40 <main+0x13c>
      uint8_t desttype;
      GETLENGTH(length);
    3f26:	34 d0       	rcall	.+104    	; 0x3f90 <getch>
    3f28:	33 d0       	rcall	.+102    	; 0x3f90 <getch>
    3f2a:	f8 2e       	mov	r15, r24

      desttype = getch();
    3f2c:	31 d0       	rcall	.+98     	; 0x3f90 <getch>

      verifySpace();
    3f2e:	42 d0       	rcall	.+132    	; 0x3fb4 <verifySpace>
    3f30:	85 01       	movw	r16, r10
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    3f32:	f8 01       	movw	r30, r16
    3f34:	85 91       	lpm	r24, Z+
    3f36:	8f 01       	movw	r16, r30
    3f38:	24 d0       	rcall	.+72     	; 0x3f82 <putch>
	} while (--length);
    3f3a:	fa 94       	dec	r15
    3f3c:	d1 f7       	brne	.-12     	; 0x3f32 <main+0x12e>
    3f3e:	0e c0       	rjmp	.+28     	; 0x3f5c <main+0x158>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f40:	85 37       	cpi	r24, 0x75	; 117
    3f42:	39 f4       	brne	.+14     	; 0x3f52 <main+0x14e>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f44:	37 d0       	rcall	.+110    	; 0x3fb4 <verifySpace>
      putch(SIGNATURE_0);
    3f46:	8e e1       	ldi	r24, 0x1E	; 30
    3f48:	1c d0       	rcall	.+56     	; 0x3f82 <putch>
      putch(SIGNATURE_1);
    3f4a:	84 e9       	ldi	r24, 0x94	; 148
    3f4c:	1a d0       	rcall	.+52     	; 0x3f82 <putch>
      putch(SIGNATURE_2);
    3f4e:	86 e0       	ldi	r24, 0x06	; 6
    3f50:	9b cf       	rjmp	.-202    	; 0x3e88 <main+0x84>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f52:	81 35       	cpi	r24, 0x51	; 81
    3f54:	11 f4       	brne	.+4      	; 0x3f5a <main+0x156>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f56:	88 e0       	ldi	r24, 0x08	; 8
    3f58:	27 d0       	rcall	.+78     	; 0x3fa8 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f5a:	2c d0       	rcall	.+88     	; 0x3fb4 <verifySpace>
    }
    putch(STK_OK);
    3f5c:	80 e1       	ldi	r24, 0x10	; 16
    3f5e:	11 d0       	rcall	.+34     	; 0x3f82 <putch>
  }
    3f60:	84 cf       	rjmp	.-248    	; 0x3e6a <main+0x66>

00003f62 <do_spm>:
 *   you could do fill-erase-write sequence with data!=0 in ERASE and
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    3f62:	fc 01       	movw	r30, r24
    3f64:	0a 01       	movw	r0, r20
    3f66:	67 bf       	out	0x37, r22	; 55
    3f68:	e8 95       	spm
    3f6a:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    3f6c:	07 b6       	in	r0, 0x37	; 55
    3f6e:	00 fc       	sbrc	r0, 0
    3f70:	fd cf       	rjmp	.-6      	; 0x3f6c <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    3f72:	66 70       	andi	r22, 0x06	; 6
    3f74:	29 f0       	breq	.+10     	; 0x3f80 <do_spm+0x1e>
    3f76:	45 2b       	or	r20, r21
    3f78:	19 f4       	brne	.+6      	; 0x3f80 <do_spm+0x1e>
      // Reenable read access to flash
      boot_rww_enable();
    3f7a:	81 e1       	ldi	r24, 0x11	; 17
    3f7c:	87 bf       	out	0x37, r24	; 55
    3f7e:	e8 95       	spm
    3f80:	08 95       	ret

00003f82 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f82:	90 91 c0 00 	lds	r25, 0x00C0
    3f86:	95 ff       	sbrs	r25, 5
    3f88:	fc cf       	rjmp	.-8      	; 0x3f82 <putch>
  UART_UDR = ch;
    3f8a:	80 93 c6 00 	sts	0x00C6, r24
    3f8e:	08 95       	ret

00003f90 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f90:	80 91 c0 00 	lds	r24, 0x00C0
    3f94:	87 ff       	sbrs	r24, 7
    3f96:	fc cf       	rjmp	.-8      	; 0x3f90 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f98:	80 91 c0 00 	lds	r24, 0x00C0
    3f9c:	84 fd       	sbrc	r24, 4
    3f9e:	01 c0       	rjmp	.+2      	; 0x3fa2 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3fa0:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    3fa2:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3fa6:	08 95       	ret

00003fa8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fa8:	e0 e6       	ldi	r30, 0x60	; 96
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	98 e1       	ldi	r25, 0x18	; 24
    3fae:	90 83       	st	Z, r25
  WDTCSR = x;
    3fb0:	80 83       	st	Z, r24
    3fb2:	08 95       	ret

00003fb4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fb4:	ed df       	rcall	.-38     	; 0x3f90 <getch>
    3fb6:	80 32       	cpi	r24, 0x20	; 32
    3fb8:	19 f0       	breq	.+6      	; 0x3fc0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fba:	88 e0       	ldi	r24, 0x08	; 8
    3fbc:	f5 df       	rcall	.-22     	; 0x3fa8 <watchdogConfig>
    3fbe:	ff cf       	rjmp	.-2      	; 0x3fbe <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3fc0:	84 e1       	ldi	r24, 0x14	; 20
    3fc2:	df cf       	rjmp	.-66     	; 0x3f82 <putch>

00003fc4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fc4:	cf 93       	push	r28
    3fc6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fc8:	e3 df       	rcall	.-58     	; 0x3f90 <getch>
    3fca:	c1 50       	subi	r28, 0x01	; 1
    3fcc:	e9 f7       	brne	.-6      	; 0x3fc8 <getNch+0x4>
  verifySpace();
}
    3fce:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3fd0:	f1 cf       	rjmp	.-30     	; 0x3fb4 <verifySpace>

00003fd2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fd2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	e8 df       	rcall	.-48     	; 0x3fa8 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    3fd8:	e0 e0       	ldi	r30, 0x00	; 0
    3fda:	ff 27       	eor	r31, r31
    3fdc:	09 94       	ijmp
