
optiboot_attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00001d00  00001d00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00001f44  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068a  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000279  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000345  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d3  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000480  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <main>
    1d02:	db c0       	rjmp	.+438    	; 0x1eba <do_spm>

00001d04 <main>:
  );
}


/* main program starts here */
int main(void) {
    1d04:	1f 92       	push	r1
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1d0a:	11 24       	eor	r1, r1
   * and still skip bootloader if not necessary
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
  ch = MCUSR;
    1d0c:	84 b7       	in	r24, 0x34	; 52
  if (ch != 0) {
    1d0e:	88 23       	and	r24, r24
    1d10:	49 f0       	breq	.+18     	; 0x1d24 <main+0x20>
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { // To run the boot loader, External Reset Flag must be set and the Watchdog Flag MUST be cleared!  Otherwise jump straight to user code.
    1d12:	98 2f       	mov	r25, r24
    1d14:	9a 70       	andi	r25, 0x0A	; 10
    1d16:	92 30       	cpi	r25, 0x02	; 2
    1d18:	29 f0       	breq	.+10     	; 0x1d24 <main+0x20>
      if (ch & _BV(EXTRF)) 
    1d1a:	81 ff       	sbrs	r24, 1
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <main+0x1e>
          MCUSR = ~(_BV(WDRF));  // Clear WDRF because it was actually caused by bootloader
    1d1e:	97 ef       	ldi	r25, 0xF7	; 247
    1d20:	94 bf       	out	0x34, r25	; 52
      appStart(ch);
    1d22:	0a d1       	rcall	.+532    	; 0x1f38 <appStart>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    1d24:	8e e0       	ldi	r24, 0x0E	; 14
    1d26:	f5 d0       	rcall	.+490    	; 0x1f12 <watchdogConfig>
  LED_DDR |= _BV(LED);
#endif

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    1d28:	d2 9a       	sbi	0x1a, 2	; 26
	vect = (vect-save_vect_num) & 0x0fff; //substract 'save' interrupt position and wrap around 4096
        // Move RESET jmp target to 'save' vector
        buff[saveVect0] = vect & 0xff;
        buff[saveVect1] = (vect >> 8) | 0xc0; //
        // Add rjump to bootloader at RESET vector
        vect = ((uint16_t)main) &0x0fff; //WARNIG: this works as long as 'main' is in first section
    1d2a:	92 e8       	ldi	r25, 0x82	; 130
    1d2c:	e9 2e       	mov	r14, r25
    1d2e:	9e e0       	ldi	r25, 0x0E	; 14
    1d30:	f9 2e       	mov	r15, r25
    1d32:	8f e0       	ldi	r24, 0x0F	; 15
    1d34:	f8 22       	and	r15, r24
        buff[0] = vect & 0xFF; // rjmp 0x1c00 instruction
	buff[1] = (vect >> 8) | 0xC0;
    1d36:	ef 2d       	mov	r30, r15
    1d38:	e0 6c       	ori	r30, 0xC0	; 192
    1d3a:	be 2e       	mov	r11, r30
   * Making these local and in registers prevents the need for initializing
   * them, and also saves space because code no longer stores to memory.
   * (initializing address keeps the compiler happy, but isn't really
   *  necessary, and uses 4 bytes of flash.)
   */
  register uint16_t address = 0;
    1d3c:	81 2c       	mov	r8, r1
    1d3e:	91 2c       	mov	r9, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1d40:	d4 d0       	rcall	.+424    	; 0x1eea <getch>

    if(ch == STK_GET_PARAMETER) {
    1d42:	81 34       	cpi	r24, 0x41	; 65
    1d44:	79 f4       	brne	.+30     	; 0x1d64 <main+0x60>
      unsigned char which = getch();
    1d46:	d1 d0       	rcall	.+418    	; 0x1eea <getch>
      verifySpace();
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	e7 d0       	rcall	.+462    	; 0x1f1a <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	82 38       	cpi	r24, 0x82	; 130
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <main+0x52>
	  putch(optiboot_version & 0xFF);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <main+0x5c>
      } else if (which == 0x81) {
    1d56:	81 38       	cpi	r24, 0x81	; 129
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <main+0x5a>
	  putch(optiboot_version >> 8);
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <main+0x5c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	b5 d0       	rcall	.+362    	; 0x1ecc <putch>
    1d62:	a8 c0       	rjmp	.+336    	; 0x1eb4 <main+0x1b0>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1d64:	82 34       	cpi	r24, 0x42	; 66
    1d66:	11 f4       	brne	.+4      	; 0x1d6c <main+0x68>
      // SET DEVICE is ignored
      getNch(20);
    1d68:	84 e1       	ldi	r24, 0x14	; 20
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <main+0x6e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1d6c:	85 34       	cpi	r24, 0x45	; 69
    1d6e:	19 f4       	brne	.+6      	; 0x1d76 <main+0x72>
      // SET DEVICE EXT is ignored
      getNch(5);
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	db d0       	rcall	.+438    	; 0x1f2a <getNch>
    1d74:	9f c0       	rjmp	.+318    	; 0x1eb4 <main+0x1b0>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1d76:	85 35       	cpi	r24, 0x55	; 85
    1d78:	41 f4       	brne	.+16     	; 0x1d8a <main+0x86>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1d7a:	b7 d0       	rcall	.+366    	; 0x1eea <getch>
    1d7c:	88 2e       	mov	r8, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1d7e:	b5 d0       	rcall	.+362    	; 0x1eea <getch>
    1d80:	91 2c       	mov	r9, r1
    1d82:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1d84:	88 0c       	add	r8, r8
    1d86:	99 1c       	adc	r9, r9
    1d88:	94 c0       	rjmp	.+296    	; 0x1eb2 <main+0x1ae>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1d8a:	86 35       	cpi	r24, 0x56	; 86
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <main+0x92>
      // UNIVERSAL command is ignored
      getNch(4);
    1d8e:	84 e0       	ldi	r24, 0x04	; 4
    1d90:	cc d0       	rcall	.+408    	; 0x1f2a <getNch>
      putch(0x00);
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	e5 cf       	rjmp	.-54     	; 0x1d60 <main+0x5c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1d96:	84 36       	cpi	r24, 0x64	; 100
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <main+0x98>
    1d9a:	55 c0       	rjmp	.+170    	; 0x1e46 <main+0x142>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1d9c:	a6 d0       	rcall	.+332    	; 0x1eea <getch>
    1d9e:	a5 d0       	rcall	.+330    	; 0x1eea <getch>
    1da0:	a8 2e       	mov	r10, r24
      savelength = length;
      desttype = getch();
    1da2:	a3 d0       	rcall	.+326    	; 0x1eea <getch>
    1da4:	d8 2e       	mov	r13, r24
    1da6:	00 e6       	ldi	r16, 0x60	; 96
    1da8:	10 e0       	ldi	r17, 0x00	; 0
    1daa:	f0 e6       	ldi	r31, 0x60	; 96
    1dac:	af 0e       	add	r10, r31

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1dae:	9d d0       	rcall	.+314    	; 0x1eea <getch>
    1db0:	f8 01       	movw	r30, r16
    1db2:	81 93       	st	Z+, r24
    1db4:	8f 01       	movw	r16, r30
      while (--length);
    1db6:	ae 12       	cpse	r10, r30
    1db8:	fa cf       	rjmp	.-12     	; 0x1dae <main+0xaa>

      // Read command terminator, start reply
      verifySpace();
    1dba:	af d0       	rcall	.+350    	; 0x1f1a <verifySpace>

#else
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if ((uint16_t)(void*)address == rstVect0) {
    1dbc:	81 14       	cp	r8, r1
    1dbe:	91 04       	cpc	r9, r1
    1dc0:	01 f5       	brne	.+64     	; 0x1e02 <main+0xfe>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
	// Save jmp targets (for "Verify")
	rstVect0_sav = buff[rstVect0];
    1dc2:	20 91 60 00 	lds	r18, 0x0060
    1dc6:	20 93 e4 00 	sts	0x00E4, r18
	rstVect1_sav = buff[rstVect1];
    1dca:	90 91 61 00 	lds	r25, 0x0061
    1dce:	90 93 e5 00 	sts	0x00E5, r25
	saveVect0_sav = buff[saveVect0];
    1dd2:	80 91 68 00 	lds	r24, 0x0068
    1dd6:	80 93 e6 00 	sts	0x00E6, r24
	saveVect1_sav = buff[saveVect1];
    1dda:	80 91 69 00 	lds	r24, 0x0069
    1dde:	80 93 e7 00 	sts	0x00E7, r24

	// Instruction is a relative jump (rjmp), so recalculate.
	uint16_t vect=(rstVect0_sav & 0xff) | ((rstVect1_sav & 0x0f)<<8); //calculate 12b displacement
    1de2:	9f 70       	andi	r25, 0x0F	; 15
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	39 2b       	or	r19, r25
	vect = (vect-save_vect_num) & 0x0fff; //substract 'save' interrupt position and wrap around 4096
    1de8:	24 50       	subi	r18, 0x04	; 4
    1dea:	31 09       	sbc	r19, r1
    1dec:	3f 70       	andi	r19, 0x0F	; 15
        // Move RESET jmp target to 'save' vector
        buff[saveVect0] = vect & 0xff;
    1dee:	20 93 68 00 	sts	0x0068, r18
        buff[saveVect1] = (vect >> 8) | 0xc0; //
    1df2:	83 2f       	mov	r24, r19
    1df4:	80 6c       	ori	r24, 0xC0	; 192
    1df6:	80 93 69 00 	sts	0x0069, r24
        // Add rjump to bootloader at RESET vector
        vect = ((uint16_t)main) &0x0fff; //WARNIG: this works as long as 'main' is in first section
        buff[0] = vect & 0xFF; // rjmp 0x1c00 instruction
    1dfa:	e0 92 60 00 	sts	0x0060, r14
	buff[1] = (vect >> 8) | 0xC0;
    1dfe:	b0 92 61 00 	sts	0x0061, r11
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    1e02:	f5 e4       	ldi	r31, 0x45	; 69
    1e04:	df 12       	cpse	r13, r31
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <main+0x106>
    1e08:	ff cf       	rjmp	.-2      	; 0x1e08 <main+0x104>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	c4 01       	movw	r24, r8
    1e12:	53 d0       	rcall	.+166    	; 0x1eba <do_spm>
    1e14:	64 01       	movw	r12, r8
	 * the default rather than checking for the correct code, we save
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
    1e16:	00 e6       	ldi	r16, 0x60	; 96
    1e18:	10 e0       	ldi	r17, 0x00	; 0
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	40 81       	ld	r20, Z
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
    1e24:	80 81       	ld	r24, Z
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	c6 01       	movw	r24, r12
    1e2e:	45 d0       	rcall	.+138    	; 0x1eba <do_spm>
		addrPtr += 2;
    1e30:	f2 e0       	ldi	r31, 0x02	; 2
    1e32:	cf 0e       	add	r12, r31
    1e34:	d1 1c       	adc	r13, r1
	    } while (len -= 2);
    1e36:	a0 12       	cpse	r10, r16
    1e38:	f0 cf       	rjmp	.-32     	; 0x1e1a <main+0x116>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	65 e0       	ldi	r22, 0x05	; 5
    1e40:	c4 01       	movw	r24, r8
    1e42:	3b d0       	rcall	.+118    	; 0x1eba <do_spm>
    1e44:	37 c0       	rjmp	.+110    	; 0x1eb4 <main+0x1b0>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1e46:	84 37       	cpi	r24, 0x74	; 116
    1e48:	39 f5       	brne	.+78     	; 0x1e98 <main+0x194>
      uint8_t desttype;
      GETLENGTH(length);
    1e4a:	4f d0       	rcall	.+158    	; 0x1eea <getch>
    1e4c:	4e d0       	rcall	.+156    	; 0x1eea <getch>
    1e4e:	d8 2e       	mov	r13, r24

      desttype = getch();
    1e50:	4c d0       	rcall	.+152    	; 0x1eea <getch>

      verifySpace();
    1e52:	63 d0       	rcall	.+198    	; 0x1f1a <verifySpace>
    1e54:	84 01       	movw	r16, r8
    1e56:	d8 0c       	add	r13, r8
#endif
    default:
	do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
	    if (address == rstVect0) ch = rstVect0_sav;
    1e58:	01 15       	cp	r16, r1
    1e5a:	11 05       	cpc	r17, r1
    1e5c:	19 f4       	brne	.+6      	; 0x1e64 <main+0x160>
    1e5e:	80 91 e4 00 	lds	r24, 0x00E4
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <main+0x188>
	    else if (address == rstVect1) ch = rstVect1_sav;
    1e64:	01 30       	cpi	r16, 0x01	; 1
    1e66:	11 05       	cpc	r17, r1
    1e68:	19 f4       	brne	.+6      	; 0x1e70 <main+0x16c>
    1e6a:	80 91 e5 00 	lds	r24, 0x00E5
    1e6e:	0e c0       	rjmp	.+28     	; 0x1e8c <main+0x188>
	    else if (address == saveVect0) ch = saveVect0_sav;
    1e70:	08 30       	cpi	r16, 0x08	; 8
    1e72:	11 05       	cpc	r17, r1
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <main+0x178>
    1e76:	80 91 e6 00 	lds	r24, 0x00E6
    1e7a:	08 c0       	rjmp	.+16     	; 0x1e8c <main+0x188>
	    else if (address == saveVect1) ch = saveVect1_sav;
    1e7c:	09 30       	cpi	r16, 0x09	; 9
    1e7e:	11 05       	cpc	r17, r1
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <main+0x184>
    1e82:	80 91 e7 00 	lds	r24, 0x00E7
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <main+0x188>
	    else ch = pgm_read_byte_near(address);
    1e88:	f8 01       	movw	r30, r16
    1e8a:	84 91       	lpm	r24, Z
	    address++;
    1e8c:	0f 5f       	subi	r16, 0xFF	; 255
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    1e90:	1d d0       	rcall	.+58     	; 0x1ecc <putch>
	} while (--length);
    1e92:	d0 12       	cpse	r13, r16
    1e94:	e1 cf       	rjmp	.-62     	; 0x1e58 <main+0x154>
    1e96:	0e c0       	rjmp	.+28     	; 0x1eb4 <main+0x1b0>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1e98:	85 37       	cpi	r24, 0x75	; 117
    1e9a:	39 f4       	brne	.+14     	; 0x1eaa <main+0x1a6>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1e9c:	3e d0       	rcall	.+124    	; 0x1f1a <verifySpace>
      putch(SIGNATURE_0);
    1e9e:	8e e1       	ldi	r24, 0x1E	; 30
    1ea0:	15 d0       	rcall	.+42     	; 0x1ecc <putch>
      putch(SIGNATURE_1);
    1ea2:	83 e9       	ldi	r24, 0x93	; 147
    1ea4:	13 d0       	rcall	.+38     	; 0x1ecc <putch>
      putch(SIGNATURE_2);
    1ea6:	8c e0       	ldi	r24, 0x0C	; 12
    1ea8:	5b cf       	rjmp	.-330    	; 0x1d60 <main+0x5c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1eaa:	81 35       	cpi	r24, 0x51	; 81
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <main+0x1ae>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1eae:	88 e0       	ldi	r24, 0x08	; 8
    1eb0:	30 d0       	rcall	.+96     	; 0x1f12 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1eb2:	33 d0       	rcall	.+102    	; 0x1f1a <verifySpace>
    }
    putch(STK_OK);
    1eb4:	80 e1       	ldi	r24, 0x10	; 16
    1eb6:	0a d0       	rcall	.+20     	; 0x1ecc <putch>
  }
    1eb8:	43 cf       	rjmp	.-378    	; 0x1d40 <main+0x3c>

00001eba <do_spm>:
 *   you could do fill-erase-write sequence with data!=0 in ERASE and
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    1eba:	fc 01       	movw	r30, r24
    1ebc:	0a 01       	movw	r0, r20
    1ebe:	67 bf       	out	0x37, r22	; 55
    1ec0:	e8 95       	spm
    1ec2:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    1ec4:	07 b6       	in	r0, 0x37	; 55
    1ec6:	00 fc       	sbrc	r0, 0
    1ec8:	fd cf       	rjmp	.-6      	; 0x1ec4 <do_spm+0xa>
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
      // Reenable read access to flash
      boot_rww_enable();
    }
#endif
}
    1eca:	08 95       	ret

00001ecc <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
  UART_UDR = ch;
#else
  __asm__ __volatile__ (
    1ecc:	2a e0       	ldi	r18, 0x0A	; 10
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	80 95       	com	r24
    1ed2:	08 94       	sec
    1ed4:	10 f4       	brcc	.+4      	; 0x1eda <putch+0xe>
    1ed6:	da 98       	cbi	0x1b, 2	; 27
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <putch+0x12>
    1eda:	da 9a       	sbi	0x1b, 2	; 27
    1edc:	00 00       	nop
    1ede:	15 d0       	rcall	.+42     	; 0x1f0a <uartDelay>
    1ee0:	14 d0       	rcall	.+40     	; 0x1f0a <uartDelay>
    1ee2:	86 95       	lsr	r24
    1ee4:	2a 95       	dec	r18
    1ee6:	b1 f7       	brne	.-20     	; 0x1ed4 <putch+0x8>
    1ee8:	08 95       	ret

00001eea <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1eea:	a8 95       	wdr
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1eec:	29 e0       	ldi	r18, 0x09	; 9
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	cb 99       	sbic	0x19, 3	; 25
    1ef2:	fe cf       	rjmp	.-4      	; 0x1ef0 <getch+0x6>
    1ef4:	0a d0       	rcall	.+20     	; 0x1f0a <uartDelay>
    1ef6:	09 d0       	rcall	.+18     	; 0x1f0a <uartDelay>
    1ef8:	08 d0       	rcall	.+16     	; 0x1f0a <uartDelay>
    1efa:	88 94       	clc
    1efc:	cb 99       	sbic	0x19, 3	; 25
    1efe:	08 94       	sec
    1f00:	2a 95       	dec	r18
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <getch+0x1e>
    1f04:	87 95       	ror	r24
    1f06:	f7 cf       	rjmp	.-18     	; 0x1ef6 <getch+0xc>
    1f08:	08 95       	ret

00001f0a <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    1f0a:	9e e0       	ldi	r25, 0x0E	; 14
    1f0c:	9a 95       	dec	r25
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <uartDelay+0x2>
    1f10:	08 95       	ret

00001f12 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f12:	98 e1       	ldi	r25, 0x18	; 24
    1f14:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f16:	81 bd       	out	0x21, r24	; 33
    1f18:	08 95       	ret

00001f1a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f1a:	e7 df       	rcall	.-50     	; 0x1eea <getch>
    1f1c:	80 32       	cpi	r24, 0x20	; 32
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f20:	88 e0       	ldi	r24, 0x08	; 8
    1f22:	f7 df       	rcall	.-18     	; 0x1f12 <watchdogConfig>
    1f24:	ff cf       	rjmp	.-2      	; 0x1f24 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f26:	84 e1       	ldi	r24, 0x14	; 20
    1f28:	d1 cf       	rjmp	.-94     	; 0x1ecc <putch>

00001f2a <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f2a:	cf 93       	push	r28
    1f2c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1f2e:	dd df       	rcall	.-70     	; 0x1eea <getch>
    1f30:	c1 50       	subi	r28, 0x01	; 1
    1f32:	e9 f7       	brne	.-6      	; 0x1f2e <getNch+0x4>
  verifySpace();
}
    1f34:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1f36:	f1 cf       	rjmp	.-30     	; 0x1f1a <verifySpace>

00001f38 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1f38:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	ea df       	rcall	.-44     	; 0x1f12 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    1f3e:	e4 e0       	ldi	r30, 0x04	; 4
    1f40:	ff 27       	eor	r31, r31
    1f42:	09 94       	ijmp
